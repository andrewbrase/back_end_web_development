MERN stack

the MERN stack consists of the following technologies

- MongoDB: A document-based open source DATABASE
- Express: A web application framework for Node.js - easily create a WEB SERVER
- React: A Javascript front-end library for building USER INTERFACES
- Node.js: Javascript RUN-TIME ENVIRONMENT that executes JavaScript 
code OUTSIDE OF BROWSER (such as a SERVER)

and Mongoose:Simple schema-based solution to model application data
- makes it easier to use MongoDB and node.js

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Database concepts terms

Tabular (relational) | MongoDB
_____________________|_________
Database             | Database
Table                | Collection
Row                  | Document
Index                | Index 
Join                 | $lookup
Foreign Key          | Reference

example of a MongoDB Document - BSON types

{
    name : "Andrew Brase",     (string)
    title : "configuration tech",
    address : {
                        address 1 : "123 Main Street"     (nested document)
                        city : "Edwardsville"
                        state : "IL"
                        postal_code : "62025"
              },
    topics : ["mongoDB","Python","Javascript","AI"],     (array)
    employee_number : 1234     (int)
    location : [44.123123 , 123.123123]     (Geo-spacial coords)
}

- looks a lot like JSON

- get MongoDB Atlas
- need a place to store data cluster

install node js 
to verify use: node --version
type in terminal: PS C:\Users\brasea\Desktop\Workspace\MERN_stack_dev> npx create-react-app MERN-exercise-tracker

We suggest that you begin by typing:

  cd mern-exercise-tracker
  npm start

  npm notice
    npm notice New minor version of npm available! 8.11.0 -> 8.15.1
    npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.15.1
    npm notice Run npm install -g npm@8.15.1 to update!
    npm notice

after finished :
cd .\mern-exercise-tracker\

- could start it up but we are going to create the backend and then creating the front end React
- inside the exercise tracker folder - create backend folder
mkdir backend
cd to backend folder
- create a package.json file 
npm init -y

- created this -
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}

- install a few packages 
*express - lightweight and fast web framework for node.js
*cors - cross origin resource sharing - so that we can easily access
something outside of our server from our server
*mongoose - interacting with mongoDB through node.js simpler
*dotenv - loads environment variables from a dotenv file to proccessenv -
this makes development simpler, so instead of setting environment variables
on our development machine - they can be stored in a file 

npm install express
npm install express cors mongoose dotenv

- install one final package globally
*nodemon - makes development easier - helps develope node.js applications 
by automatically restarting the node appliocation when changes in the file
dir are detected

npm install -g nodemon

- time to create our server 
inside backend folder create a file server.js
- fill out server.js with required packages etc.

type in terminal: nodemon server

- this is the point to where you can connect your mongoDB atlas database 
add this to the server.js file in backend

// require packages that were installed
const express = require('express');
const cors = require('cors');

// mongoose will help us connect to our mongoDB database
const mongoose = require('mongoose')

require('dotenv').config();

// how we create our express server
const app = express();
const port = process.env.PORT || 5000;

// middleware - allow us to parse json
app.use(cors());
app.use(express.json())
// 
const uri = process.env.ATLAS_URI;
mongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true }
);
const connection = mongoose.connection;
connection.once('open', () => {
    console.log("MongoDB database connection established successfully");
})

// this starts the server
app.listen(port, () => {
    console.log('Server is running on port: ' + port);
});

should say - [nodemon] app crashed - waiting for file changes before starting...
because we do not have the environmental variable yet

go into backend folder and create a new file called .env
get the connection string from mongoDB 
mongodb+srv://brasea:<password>@cluster0.0mlbgas.mongodb.net/?retryWrites=true&w=majority

inside of .env file assign
ATLAS_URI = mongodb+srv://brasea:<password>@cluster0.0mlbgas.mongodb.net/?retryWrites=true&w=majority
type in password in <password> field

nodemon server to start server

-->
Compiled successfully!

You can now view mern-exercise-tracker in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://10.140.2.2:3000

Note that the development build is not optimized.     
To create a production build, use npm run build.      

webpack compiled successfully

- now connected to database, need to be able to put things into 
the database and read from the database
-create our database schema using mongoose
will include 2 things -
exercise and users

- inside backend folder create new dir models
- inside models folder create 2 new files

-exercise.model.js 
-user.model.js GOING INTO USER.MODEL.JS --->
--->
--->
--->
// require mongoose
const mongoose = require('mongoose');

// new mongoose schema
const Schema = mongoose.Schema;

// a sing field username with some validations 
const userSchema = new Schema({
    username: {
        // type is a string required
        type: String,
        required: true,
        // require it's unique
        unique: true,
        // trim whitespace off the end
        trim: true,
        // minimum length of 3
        minlength: 3
    },
}, {
    // create fields for when it was created and modified
    timestamps: true,
});

const User = mongoose.model('User', userSchema);

module.exports = User;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


INSIDE OF EXERCISE.MODEL.JS-->
// require mongoose
const mongoose = require('mongoose');

// new mongoose schema
const Schema = mongoose.Schema;

const exerciseSchema = new Schema({
    username: { type: String, required: true},
    description: { type: String, required: true},
    duration: {type: Number, required: true},
    date: { type: Date, required: true},
}, {
    timestamps: true,
});

// add the API endpoint routes so that the server can be used to perform
//  the CRUD operations - CREATE, READ, UPDATE, DELETE

const Exercise = mongoose.model('Exercise', exerciseSchema);

module.exports = Exercise;

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// add the API endpoint routes so that the server can be used to perform
//  the CRUD operations - CREATE, READ, UPDATE, DELETE

inside the backend folder create a folder called routes
inside route folder -> create a folder named exercises.js
AND a file named users.js

- tell the server to use the files that we just created 
-> go to server.js file reight before the app.listen(port, () => {
--->
--->
--->

// we have to require these files and use the files in routes
const exerciseRouter = require('./routes/exercises');
const usersRouter = require('./routes/users')

// whenever someone goes to the root URL and /exercises is at the end
// its going to load (app.use) everything in the exercises router
// same for the users router
app.use('/exercises', exerciseRouter);
app.use('/users', usersRouter);

(BOTTOM OF SERVER.JS FILE)
(// this starts the server
app.listen(port, () => {
    console.log('Server is running on port: ' + port);
});)
(BOTTOM OF SERVER.JS FILE)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
go to users.js in routes folder
