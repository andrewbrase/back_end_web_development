NPM - Node Package Manager
a CLI app that automatically comes included with node js and is used to install and manage open source packages,
these packages are usually located in the package repository @ npmjs.com

NPM also has React packages, express etc. - a lot of different areas of the stack
the first thing we usually do when starting a project is to use npm init

>npm init
--->
creates a package.json file

>>>
See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (04_npm)
>>>

---> created this file
{
  "name": "node-farm",
  "version": "1.0.0",
  "description": "Learning node.js",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Andrew",
  "license": "ISC"
}

--- there is a lot othe things that can be added to this file, which we will do later on
--- we can start installing packages, they will be registered in that file

this will basically create a package.json file which is kind of a configuration file of our project
all kinds of data is stored here


----------------------------------------------------------------------
Types of packages and installs

- simple/regular dependencies - packages that contain some code that we will include in our own code - code in which we build our own app

the package that we will install is called slugify - a small tool that we can use to make more readable URLs

>npm install {name of package}
>npm install slugify

--->
node_modules/slugify/package.json
--->
"name": "slugify",
  "version": "1.6.5",
  "description": "Slugifies a String",
  "keywords": [
    "slugify",
    "slug",
    "url",
    "urlify"
  ],
  etc.
  etc.
  etc.

-> then you need to require the 3rd party module w/ const slugify = require('slugify');
  ----------------------------------------------------------------------

- development dependencies - tools for development like a code bundler or debugger tool 
or testing lab, not needed in the actual code,

we will install a dev dependency
modules >npm install nodemon --save-dev

gloabl installs work accross all projects
npm i nodemon --global

how to use this
nodemon 03_index.js

----------------------------------------------------------------------
Package versioning and updating 

how to check for outdated packages 
>npm outdated

--->
Package   Current  Wanted  Latest  Location               Depended by
mongoose    6.5.0   6.5.1   6.5.1  node_modules/mongoose  03_project

>npm update {insert if you want specific}
>npm update 
(updates all)

--- to delete modules ---
npm uninstall {specific}
----------------------------------------------------------------------
the best way to share the node_modules folder is to 

share file (NO node module folder)
> npm install ---> this will read the project and install everything required within 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if you're sharing your code, always include the package.json and 
package-lock.json file because these 2 files are necessary for the 
other dev to reconstruct the modules folder

TODO extension
todo + :
fixme + :
TODO: FIXME: 

----------------------------------------------------------------------
HTTP request

start line contains the http method that is used in the request, 
the request target & the HTTP version -
Start line : HTTP method + request target + HTTP version

REQUEST from client------------->

*** GET /maps HTTP/1.1 ***
the request target is targeting the maps resource in this example
the websites root would be just a /

~~~
GET : requests data
POST : sending data
PUT & PATCH : modify data
~~~

The next part of the request are the request headers - some info that we send about the request itself
info includes : which browser making request, what time, users language etc.
Host : www.google.com
User-Agent: Mozilla/5.0
Accept_Language: en-US

Contains data for ex. from an html form 
<BODY>

there is https - more secure - uses tls encryption 
----------------------------------------------------------------------
<-------------RESPONSE from server

Start line : HTTP version + status code + status message
HTTP/1.1 200 OK

ex. status code {404 not found}

Date: Fri, 18 Jan 2022
Content-Type: text/html        ---> info about response itself 
Transfer-Encoding: chunked     (we can make up our own headers - back end)

the developer specifically sends back the body and the response
we already have done this with res.end() (response.end)
<BODY>
ex. contains html of website or JSON data from an api something like that

once the html is sent, it is scanned on client side to see what css, or JS it needs
more requests will be sent to the server for this info
---
TCP
job of tcp is to break up the requests and responses into chunks 
called packets before they are sent and then once they arrive at 
their destination they are reassembled

IP
job of ip protocol is to route the packets through the internet 
----------------------------------------------------------------------
back end server will include files and a HTTP server that is capable 
of understanding URLs and requests and delivering responses
the http server is like a bridge between the client and the back end files

*This is a Static server - it can serve static files to the client via http
Browser (front end html,css,JS, frameworks like React & Angular) <--> WEB SERVER {HTTP server <--> files}

*Dynamic web apps talk to databases & etc. we use a server that is also
capable of running our dynamic app
this is called a Dynamic server
Browser (front end html,css,JS, frameworks like React & Angular) <--> WEB SERVER {HTTP server <--> web app <--> files} <--> database

our backend stack : Node.js MongoDB 

You can have a noSQL or a SQL database
----------------------------------------------------------------------
Static websites vs Dynamic websites

* Static - the developer uploads the ready to be served files of the website onto the web server html,css,JS + more,
these are the same files that the server will send to the client when the site is visited. The browser will take these files and render them as they are,
there is no backend code or app running. Server is serving static files
(You will always see the same website)

* Dynamic - The website can change anytime based on the data from within the database . Dynamic websites usually contain a database, then there's usually an app running (like node.js) which fetches data from the datatbase ---> then togteher with a pre- defined template 
builds each page that the user requests dynamically based on data from the database ---> that page is then built with html,css,JS which will then be set to the browser
ex. (twitter gets updated everyday ith new tweets. If it was a static site, the tweets would not stay on that website)
!!! This process is called Server side rendering !!!

~~~
API

(Application Programming Interface)

  |-------------------BUILDING API-------------------| |----------------------Consuming API----------------------|
* API - database ---> GET DATA -----> JSON DATA <---> browser -> Build website w/ front end frameworks
have an app that fetches data from the databse everytime the client makes a request
with an API we only send the data to the browser, usually in JSON data format, not the ready to be displayed website (no html,css,JS)
!!! front end frameworks build the site with the JSON data and template !!!
!!! This is called  Client Side Rendering !!!

~~In this course we will make both Dynamic - server side rendered website and an API client side rendered website 

!!! An API can be consumed by other clients other than just a browser
an API could transfer data between natice mobile apps, IOS and android and (mac OS native app also Windows native app) etc. not just a browser
----------------------------------------------------------------------

Node architecture
node runtime has several dependancies, the V8 JS engine and libuv
V8 engine convers JS code into machine code that a computer can actually understand

libuv is an open source library with a strong focus of asynchronous io (input output) 
- this layer is what gives node access to the underlying OS , filesystem, networking and more
libuv also implements 2 extremelyimportant features of node.js 
- event loop - handles tasks like callback functions 
- thread pool - (heavier work) handles tasks like file compression and file access
* libuv is written in c++ and V8 as well

node allows us to write 100% pure JS code that allows for these functions like file access
node also relies on things like http-parser {http requests}, c-ares {DNS requests}, openSSL{cryptography}, zlib{compression}

node is single threaded
node offloads expensive tasks to the thread pool to keep the event loop functional

event loop : all the application code that is inside callback functions (non-top-level code)
node.js is built around callback functions - functions that are called as soon as some task is finished

node has an event-driven architecture
event-driven architecture: events are emitted > event loops pick them up > callbacks are called
ex. new http request > event ---> callback

The event Loop:
each phase has its own callback queue

Start
  |
  |
  V
(Expired timer callbacks) - for example setTimeout() function - if there are callback functions from timers that just expired these are 
the first ones to be processed by the event loop. If a timer expires later durring one of the other phases, the callback will only be 
called once the loop is returned to the timer callbacks phase until there are no more callbacks in the queue **
  |
  |
  V
(I/O (input/output) polling and callbacks) - polling means looking for new IO events that are ready to be proccessed and putting them into 
the callback queue, (networking and file access) ex. fs.readFile() ****
  |
  |
  V
(set immediate callbacks) - process callbacks immediately after the IO polling and execution phase - more important in more advanced use cases *
  |
  |
  V
(close callbacks) - all close events are processed, ex. web socket shuts down **

(Next tic que and microtask que(resolve promises) any callbacks happen for these, they will be processed immediately instead of having to loop back)
Process.Nexttick() is a function can be used if we need to execute a certain callback right after the current event
similar but (set immediate only runs after the IO callback)

finishes one tic of the event loop - one cycle in the loop 
next determine if the event loop should continue with another tic or stop 
node checks : Any pending timers or I/O tasks? ---> continue loop if yes