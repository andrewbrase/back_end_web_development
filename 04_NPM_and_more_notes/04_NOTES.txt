NPM - Node Package Manager
a CLI app that automatically comes included with node js and is used to install and manage open source packages,
these packages are usually located in the package repository @ npmjs.com

NPM also has React packages, express etc. - a lot of different areas of the stack
the first thing we usually do when starting a project is to use npm init

>npm init
--->
creates a package.json file

>>>
See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (04_npm)
>>>

---> created this file
{
  "name": "node-farm",
  "version": "1.0.0",
  "description": "Learning node.js",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Andrew",
  "license": "ISC"
}

--- there is a lot othe things that can be added to this file, which we will do later on
--- we can start installing packages, they will be registered in that file

this will basically create a package.json file which is kind of a configuration file of our project
all kinds of data is stored here


----------------------------------------------------------------------
Types of packages and installs

- simple/regular dependencies - packages that contain some code that we will include in our own code - code in which we build our own app

the package that we will install is called slugify - a small tool that we can use to make more readable URLs

>npm install {name of package}
>npm install slugify

--->
node_modules/slugify/package.json
--->
"name": "slugify",
  "version": "1.6.5",
  "description": "Slugifies a String",
  "keywords": [
    "slugify",
    "slug",
    "url",
    "urlify"
  ],
  etc.
  etc.
  etc.

-> then you need to require the 3rd party module w/ const slugify = require('slugify');
  ----------------------------------------------------------------------

- development dependencies - tools for development like a code bundler or debugger tool 
or testing lab, not needed in the actual code,

we will install a dev dependency
modules >npm install nodemon --save-dev

gloabl installs work accross all projects
npm i nodemon --global

how to use this
nodemon 03_index.js

----------------------------------------------------------------------
Package versioning and updating 

how to check for outdated packages 
>npm outdated

--->
Package   Current  Wanted  Latest  Location               Depended by
mongoose    6.5.0   6.5.1   6.5.1  node_modules/mongoose  03_project

>npm update {insert if you want specific}
>npm update 
(updates all)

--- to delete modules ---
npm uninstall {specific}
----------------------------------------------------------------------
the best way to share the node_modules folder is to 

share file (NO node module folder)
> npm install ---> this will read the project and install everything required within 

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if you're sharing your code, always include the package.json and 
package-lock.json file because these 2 files are necessary for the 
other dev to reconstruct the modules folder

TODO extension
todo + :
fixme + :
TODO: FIXME: 

----------------------------------------------------------------------
HTTP request

start line contains the http method that is used in the request, 
the request target & the HTTP version -
Start line : HTTP method + request target + HTTP version

REQUEST from client------------->

*** GET /maps HTTP/1.1 ***
the request target is targeting the maps resource in this example
the websites root would be just a /

~~~
GET : requests data
POST : sending data
PUT & PATCH : modify data
~~~

The next part of the request are the request headers - some info that we send about the request itself
info includes : which browser making request, what time, users language etc.
Host : www.google.com
User-Agent: Mozilla/5.0
Accept_Language: en-US

Contains data for ex. from an html form 
<BODY>

there is https - more secure - uses tls encryption 
----------------------------------------------------------------------
<-------------RESPONSE from server

Start line : HTTP version + status code + status message
HTTP/1.1 200 OK

ex. status code {404 not found}

Date: Fri, 18 Jan 2022
Content-Type: text/html        ---> info about response itself 
Transfer-Encoding: chunked     (we can make up our own headers - back end)

the developer specifically sends back the body and the response
we already have done this with res.end() (response.end)
<BODY>
ex. contains html of website or JSON data from an api something like that

once the html is sent, it is scanned on client side to see what css, or JS it needs
more requests will be sent to the server for this info
---
TCP
job of tcp is to break up the requests and responses into chunks 
called packets before they are sent and then once they arrive at 
their destination they are reassembled

IP
job of ip protocol is to route the packets through the internet 