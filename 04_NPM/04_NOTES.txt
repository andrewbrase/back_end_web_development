NPM - Node Package Manager
a CLI app that automatically comes included with node js and is used to install and manage open source packages,
these packages are usually located in the package repository @ npmjs.com

NPM also has React packages, express etc. - a lot of different areas of the stack
the first thing we usually do when starting a project is to use npm init

>npm init
--->
creates a package.json file

>>>
See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (04_npm)
>>>

---> created this file
{
  "name": "node-farm",
  "version": "1.0.0",
  "description": "Learning node.js",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Andrew",
  "license": "ISC"
}

--- there is a lot othe things that can be added to this file, which we will do later on
--- we can start installing packages, they will be registered in that file

this will basically create a package.json file which is kind of a configuration file of our project
all kinds of data is stored here


----------------------------------------------------------------------
Types of packages and installs

- simple/regular dependencies - packages that contain some code that we will include in our own code - code in which we build our own app

the package that we will install is called slugify - a small tool that we can use to make more readable URLs

>npm install {name of package}
>npm install slugify

--->
node_modules/slugify/package.json
--->
"name": "slugify",
  "version": "1.6.5",
  "description": "Slugifies a String",
  "keywords": [
    "slugify",
    "slug",
    "url",
    "urlify"
  ],
  etc.
  etc.
  etc.

-> then you need to require the 3rd party module w/ const slugify = require('slugify');
  ----------------------------------------------------------------------

- development dependencies - tools for development like a code bundler or debugger tool 
or testing lab, not needed in the actual code,

we will install a dev dependency
modules >npm install nodemon --save-dev

gloabl installs work accross all projects
npm i nodemon --global

how to use this
nodemon 03_index.js

----------------------------------------------------------------------
Package versioning and updating 

how to check for outdated packages 
>npm outdated

--->
Package   Current  Wanted  Latest  Location               Depended by
mongoose    6.5.0   6.5.1   6.5.1  node_modules/mongoose  03_project

>npm update {insert if you want specific}
>npm update 
(updates all)

--- to delete modules ---
npm uninstall {specific}
----------------------------------------------------------------------
the best way to share the node_modules folder is to 

share file (NO node module folder)
> npm install ---> this will read the project and install everything required within 